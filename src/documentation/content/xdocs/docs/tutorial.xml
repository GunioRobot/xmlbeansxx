<?xml version="1.0"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Short Tutorial of xmlbeansxx</title> 
    <notice></notice>
    <abstract>
      This tutorial will help you download, build, install xmlbeansxx
      library and create your a very simple project using it.
    </abstract>
    <meta name="Keywords">xmlbeans,xmlbeans port to C++, XML, XML Schema, code generator, XML Manipulation, xmlbeansc, xmlbeans++ xmlbeansc++, xmlbeansxx, xmlbeanscxx</meta>
  </header> 
  <body> 

<note>
<strong>xmlbeansxx</strong> was inspired by <a href="http://xmlbeans.apache.org">Apache XMLBeans</a> (developed by
                <a href="http://www.apache.org">The Apache XML Project</a>). This tutorial is
                strongly based on <a href="http://xmlbeans.apache.org/documentation/tutorial_getstarted.html">XMLBeans tutorial</a>.
</note>

<section>
<title>Introduction</title>
<p>This tutorial introduces <strong>xmlbeansxx</strong> basics. Through it, you'll get a hands on view of
                the three technologies that make up version 1 of <strong>xmlbeansxx</strong>: strongly-typed access to
                XML through compiled schema, type-agnostic access to XML through the XML cursor (not
                yet implemented) and xpath query system called XQuery (not yet implemented).
                This tutorial describes what <strong>xmlbeansxx</strong> is and introduces a few of the tools that come
                with an <strong>xmlbeansxx</strong> installation.</p>

<p>To get started, you'll need the following:</p>
<ul>
<li>JDK 1.4 for version 1 <strong>xmlbeansxx</strong> releases. You can download the JDK
    <a href="http://java.sun.com/j2se/1.4.2/download.html">here</a>.</li>
<li>An <strong>xmlbeansxx</strong> version 1 installation. If you don't have this yet, you'll find
                    installation instructions at <a href="how_to_install.html">Installing xmlbeansxx</a>.</li>
<li>An editor for writing C++ code. This could be a text editor or your favorite C++ IDE.</li>
<li><strong>TODO TODO Write exact prerequisites TODO TODO</strong></li>
</ul>

<p>You'll create a few files as part of this tutorial. Start out by creating a new
                tutorials directory just under your XMLBEANS_HOME directory. This will hold the
                files you create in the course of this tutorial. While you're at it, create the
                following subdirectories under the tutorials directory: classes, instances, src,
                lib. If you're working with <strong>xmlbeansxx</strong> version 1.0.3, your hierarchy should look
                something like this:</p>
<source>xmlbeansxx-1.0
    ...
    tutorials
        gettingstarted
            classes
            instances
            lib
            src</source>
</section>
<section>        
<title>Get Acquainted with the Basics</title>
<p><strong>xmlbeansxx</strong> includes multiple related technologies for handling XML. In a
                nutshell, <strong>xmlbeansxx</strong> offers three complementary technologies:</p>

<ul>
<li>A schema-oriented way to view XML instances through Java types based on the schema.</li>
<li>A schema-agnostic way to traverse the full XML infoset.</li>
<li>A schema object model through which, in Java code, you can examine a compiled
                    XML schema. (Note: this aspect of <strong>xmlbeansxx</strong> is not covered in this tutorial. For
                    more information, see <a href="http://xmlbeans.apache.org/docs/guide/conIntroToTheSchemaTypeSystem.html">
		    Introduction to the Schema Type System.</a></li>
</ul>

<p>There's much more, but that's a start. Each of these three pieces is useful for
                different goals, and you may find yourself writing code that uses all three in the
                same application. The rest of this tutorial will introduce you to these technologies.</p>
</section>
        
<section>
<title>Getting Started with Handling XML Through Schema</title>
<p>One of the things <strong>xmlbeansxx</strong> does best is provide a way for you to handle XML by using
                a schema to which the XML conforms. With <strong>xmlbeansxx</strong> you can compile one or more schema
                (XSD) files to generate Java types. By binding XML instance documents to these Java
                types, you provide yourself a way to access the instances in Java in a
                schema-oriented way.</p>

<p>If you don't know anything about schema, here are a few basics for this one:</p>
<ul>
                
<li>This schema is a blueprint, defining the rules for creating a certain "shape" of
                    XML for purchase orders.</li>
                
<li>The purchase order XML defined here would have a <em>&lt;purchase-order&gt;</em>
                    element that has four immediate children: <em>&lt;customer&gt;</em>,
                    <em>&lt;date&gt;</em>, <em>&lt;line-item&gt;</em>, and <em>&lt;shipper&gt;</em> &mdash;
                    in that sequence.</li>
                
<li>Each of the four child elements has its own children in a particular structure,
                    as defined in the schema's respective <em>&lt;complexType&gt;</em> elements.</li>
            
</ul>
<p>Now take a look at an XML document based on this schema. Copy the following XML from
                this page into a new XML file called easypo.xml, then put the file in the
                tutorials\gettingstarted\instances directory you created at the beginning of this tutorial.</p>
<source>&lt;purchase-order xmlns="http://openuri.org/easypo"&gt;
    &lt;customer&gt;
        &lt;name&gt;Gladys Kravitz&lt;/name&gt;
        &lt;address&gt;Anytown, PA&lt;/address&gt;
    &lt;/customer&gt;
    &lt;date&gt;2003-01-07T14:16:00-05:00&lt;/date&gt;
    &lt;line-item&gt;
        &lt;description&gt;Burnham's Celestial Handbook, Vol 1&lt;/description&gt;
        &lt;per-unit-ounces&gt;5&lt;/per-unit-ounces&gt;
        &lt;price&gt;21.79&lt;/price&gt;
        &lt;quantity&gt;2&lt;/quantity&gt;
    &lt;/line-item&gt;
    &lt;line-item&gt;
        &lt;description&gt;Burnham's Celestial Handbook, Vol 2&lt;/description&gt;
        &lt;per-unit-ounces&gt;5&lt;/per-unit-ounces&gt;
        &lt;price&gt;19.89&lt;/price&gt;
        &lt;quantity&gt;2&lt;/quantity&gt;
    &lt;/line-item&gt;
    &lt;shipper&gt;
        &lt;name&gt;ZipShip&lt;/name&gt;
        &lt;per-ounce-rate&gt;0.74&lt;/per-ounce-rate&gt;
    &lt;/shipper&gt;
&lt;/purchase-order&gt;</source>
<p>This XML represents a purchase order in through which Gladys, an amateur astronomer,
                is buying two books to use as references in her stargazing (along with an extra copy
                of each for her niece). Because this XML is an instance of the schema, you'll
                recognize the <code>&lt;purchase-order&gt;</code> element and its children,
                <code>&lt;customer&gt;</code>, <code>&lt;date&gt;</code>, <code>&lt;line-item&gt;</code>, and <code>&lt;shipper&gt;</code>.</p>

<p>Now to try these examples out with <strong>xmlbeansxx</strong>. Among the tools included with <strong>xmlbeansxx</strong>
                is scompxx, a script that executes the schema compiler (part of the <strong>xmlbeansxx</strong> API) to
                compile a schema or directory of schemas. Use scompxx to compile the <a href="http://svn.apache.org/viewcvs.cgi/*checkout*/xmlbeans/trunk/samples/SchemaEnum/schemas/EasyPO.xsd">easypo schema</a>. On
                Windows, use the following command (this script is also available on UNIX):</p>
<source>scompxx schemas\easypo\easypo.xsd</source>
<p>You'll end up with easypo.so in the .lib directory of your tutorial hierarchy. You can now <strong>make install</strong> it.</p>

<section>
<title>Results of Compiling the Schema</title>
<p>[This section describes the interfaces generated by the schema compiler. If
                    you're familiar with this want to skip to writing Java code, go to <a href="#writing_code_that_uses_types">Writing Code
                    that Uses Generated Types</a>.]</p>
<p>The schema compiler's output is designed not only to provide a JavaBeans-oriented
                    view of your schema, but to anticipate the shortcuts you're likely to want. If
                    you compare the contents of <a href="http://svn.apache.org/viewcvs.cgi/*checkout*/xmlbeans/trunk/samples/SchemaEnum/schemas/EasyPO.xsd">easypo.xsd</a> with the Java types generated by
                    compiling it, you'll see obvious parallels. For each of the elements and schema
                    types defined in the schema, the schema compiler has generated Java types. The
                    package namespace corresponds to the schema's namespace URI.</p>
<p>For example, take another look at the &lt;purchase-order&gt; element
                    defined in the schema:</p>

<source>&lt;xs:element name="purchase-order"&gt;
    &lt;xs:complexType&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="customer" type="po:customer"/&gt;
            &lt;xs:element name="date" type="xs:dateTime"/&gt;
            &lt;xs:element name="line-item" type="po:line-item" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="shipper" type="po:shipper" minOccurs="0" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</source>
<p>This snippet defines the <code>&lt;purchase-order&gt;</code> element as having a
                    "local" complex type (also known as an "anonymous" complex type). This type
                    includes a sequence of child elements (in the schema world,
                    <code>&lt;sequence&gt;</code> is a "compositor" and each <code>&lt;element&gt;</code> is a
                    "particle"). The <code>&lt;date&gt;</code> element is specified as an xs:dateTime, a
                    built-in type defined by the W3C's schema data type specification; the other
                    three elements are complex types defined elsewhere in this schema.</p>

<section>
<title>Options for Accessing Elements of Built-In Schema Types</title>
<p>To represent the <code>&lt;purchase-order&gt;</code> element, the
                        schema compiler has generated a <code>PurchaseOrder</code> class that
                        extends <a href="http://DOCS/reference/xmlbeans/XmlObject.html">
                            <code>xmlbeansxx::XmlObject</code>

                        </a>. As well as this class scompxx generated another one: <code>PurchaseOrderDocument</code>.
                        <strong>xmlbeansxx</strong> does this
                        for <code>"global"</code> element and attributes &mdash; those defined at the
                        top level of the schema. This is to provide you with a way to get and set
                        the global item as a whole piece, which would be difficult to do if it
                        weren't contained by anything. In other words, you need a type on which to
                        methods such as <code>getPurchaseOrder</code> and
                        <code>setPurchaseOrder</code> and this <code>"Document"</code>
                        class fills that role.</p>
                        
                        <p> For each of <code>&lt;purchase-order&gt;</code>'s four child
                        elements, the <code>PurchaseOrder</code> class exposes accessors
                        according to JavaBeans conventions. For example, for the
                        <code>&lt;date&gt;</code> element you have the following:</p>
<source>public:
        xmlbeansxx::Calendar getDate()
        void setDate ( xmlbeansxx::Calendar )</source>

<p>This is one of two ways that the schema compiler provides for access to the
                        <code>&lt;date&gt;</code> element &mdash; a more convenient, Java-native
                        way, one might say. These accessors are a kind of convenience pair (you're
                        likely to want a <code>Calendar</code> instance when working with a date).
                        However, because the <code>&lt;date&gt;</code> element's type,
                        <code>xs:dateTime</code>, is a built-in schema type, the schema compiler
                        provides accessors that get and set its value with another Java type that
                        <strong>xmlbeansxx</strong> defines:</p>

<source>public:
        xmlbeansxx::XmlDateTime xgetDate()
        void xsetDate( xmlbeansxx::XmlDateTime )</source>
<!-- <p>
                        
<a href="http://xmlbeans.apache.org/docs/reference/org/apache/xmlbeans/XmlDateTime.html">
                            <code>XmlDateTime</code>
                        </a> can be seen as a Rosetta Stone. With it, you can get and set the
                        element's value using <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Calendar.html">
                            <code>java.util.Calendar</code>
                        </a>, <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Date.html">

                            <code>java.util.Date</code>
                        </a>, and <a href="http://xmlbeans.apache.org/docs/reference/org/apache/xmlbeans/GDate.html">
                            <code>org.apache.xmlbeans.GDate</code>
                        </a>. (For a full list of how built-in schema types are mapped to Java
                        types by the compiler, see
                        <a href="http://xmlbeans.apache.org/docs/guide/conXmlbeansxxSupportBuiltInSchemaTypes.html">xmlbeansxx
                            Support for Built-In Schema Types</a>.) </p> -->
</section>

<section>
<title>Access for Elements of User-Defined Schema Types</title>

<p>For the three elements whose types are defined <em>within</em> the schema,
                        the compiler generates separate C++ classes and uses these in accessors &mdash; as
                        below for the <code>&lt;customer&gt;</code> element's
                        <code>customer</code> type.</p>
<source>public:
        org::openuri::easypo::Customer getCustomer()
        void setCustomer( org::openuri::easypo::Customer )</source>
<p>In other words you can call <code>getCustomer</code> to retrieve its
                        <code>Customer</code> instance, then update the instance's contents &mdash; which
                        is how you update the content of the <code>&lt;customer&gt;</code>

                        element it represents. </p>
<p>Along the same lines, you get a convenience method for complex types like
                        <code>customer</code>, like so:</p>
<source>public:
        org::openuri::easypo::Customer addNewCustomer()</source>
<p>Through an <code>add*</code> method such as this one, you can add a new
                        <code>&lt;customer&gt;</code> element to the
                        <code>&lt;purchase-order&gt;</code> element. The method returns a
                        <code>Customer</code> instance so that you can update the new element's
                        contents. </p>

<p>Other convenience methods are provided for elements and attributes that
                        schema defines as optional. The <code>&lt;shipper&gt;</code> element
                        is optional because the schema specifies its <code>minOccurs</code>
                        attribute value as <code>0</code> (the default value for this attribute is
                        <code>1</code>). As a result, the element need not exist in the XML in order
                        for the instance to be valid. To find out if it's there and to remove it if
                        it is, you get these methods:</p>
<source>public:
        boolean isSetShipper ( ) 
        void unsetShipper ( )</source>
</section>

<section>
<title>Arrays for Accessing Elements That May Occur More Than Once</title>
<p>Another optional element defined by the schema is
                        <code>&lt;line-item&gt;</code>. However, there's an important
                        difference for <code>&lt;line-item&gt;</code> &mdash; its
                        <code>maxOccurs</code> attribute's value is "unbounded,"
                        meaning it may occur multiple times as a child of
                        <code>&lt;purchase-order&gt;</code> (like <code>minOccurs</code>,
                        the default of <code>maxOccurs</code> is <code>1</code>). A common Java way
                        to handle multiple instances of the same type is through an array of that
                        type &mdash; and that's exactly what the schema compiler gives you:</p>

<source>public:
        // Get or set the whole array.
        org::openuri::easypo::LineItem[] getLineItemArray ( )
        void setLineItemArray ( org::openuri::easypo::LineItem[] )

        // Get or set a single item.
        org::openuri::easypo::LineItem getLineItemArray ( int )
        void setLineItemArray( int, org::openuri::easypo::LineItem )

        // Add or remove an item.
        org::openuri::easypo::LineItem insertNewLineItem( int )
        void removeLineItem( int )

        // Get the array's size (without having to get the array, then call .length).
        int sizeOfLineItemArray()</source>
<p>Finally, you'll notice that the schema compiler has generated a <code>field</code>:</p>
<source>public static final org.apache.xmlbeans.SchemaType type</source>
<p>You can use this field for access to a <a href="http://xmlbeans.apache.org/docs/reference/org/apache/xmlbeans/SchemaType.html">
                            <code>SchemaType</code>
                        </a> instance that represents the underlying schema type itself. This
                        will be covered in the last part of this tutorial.</p>

<note>
For more information about the types generated from schema, see
        <a href="generated_classes.html">C++ Classes Generated from User-Derived Schema Types</a>.
        To learn more about generated methods, see
        <a href="generated_methods.html">Methods in Classes Generated from Schema</a>.
        Also, <strong>xmlbeansxx</strong> provides its own Java types for built-in schema data types such as
        <code>xs:dateTime</code>, <code>xs:decimal</code>, and so on.
        To read more about these, see the original document
        <a href="http://xmlbeans.apache.org/docs/guide/conIntroToTheSchemaTypeSystem.html">
	Apache XmlBeans Support for Built-In Schema Types</a>.
</note>
</section>

<section>
<title>Writing Code that Uses Generated Types</title>
<p>You're going to write a bit of code to add a new line item to the purchase order.
                    It turns out that Gladys wants to add another book to her order. Your code will
                    accept the existing order along with raw data for the new item, then add the
                    item and return the updated XML.</p>
<p>Start out by creating a POUpdater.cpp file in the
                    <code>tutorials\gettingstarted\src</code> directory. Add the following code to
                    that file:</p>
<source>#include &lt;fstream&gt;
#include &lt;easypo.h&gt;

using namespace std;
using namespace org::openuri::easypo;

string addLineItem(istream purchaseOrder, string itemDescription,
                                          string perUnitOuncesString, 
                                          string itemPriceString,
					  string itemQuantityString) {
        // Bind the incoming XML to an xmlbeansxx type.
        PurchaseOrderDocument poDoc;
        poDoc = PurchaseOrderDocument::parse(purchaseOrder);

        return poDoc->toString();
}</source>
<p>So far, the <code>addLineItem</code> function binds the incoming XML to an <strong>xmlbeansxx</strong>
                    type generated by compiling the schema. This snippet creates a function that
                    receives a <code>istream</code> instance representing the purchase order XML, as
                    well as strings containing the raw data that will comprise the new item added.
                    You bind the XML <em>document</em> &mdash; the root element and its children &mdash; to the
                    <code>PurchaseOrderDocument</code> class. This class, like all types
                    extending <code>XmlObject</code>
                    (including all types generated from schema), provides a
                    <code>Factory</code> methods with which to create new instances. The
                    <code>Factory</code> methods are two versions of the <code>parse</code>
                    method, one receiving XML code as <code>istream</code> and the other - parsing
		    <code>string</code>. In addition - every <code>Factory</code> class is capable
		    of creating instances with <code>newInstance</code> methods - one for creating
		    single instance, and the other - for creating array of instances.</p>

<p>The method's next bit of code, shown below, converts the incoming raw data into
                    types that can be used when creating the new <code>&lt;line-item&gt;</code> element.
                    It then adds the new element and sets that element's children's values. Remember
                    that in <strong>xmlbeansxx</strong>, you get at the type representing a global element by going
                    through the <code>"Document"</code> type that contains it &mdash; here, with the
                    <code>getPurchaseOrder</code> method. </p>
<source>BigInteger perUnitOunces (perUnitOuncesString);
BigInteger itemPrice (itemPriceString);
BigInteger itemQuantity (itemQuantityString);

LineItem newItem = poDoc->getPurchaseOrder()->addNewLineItem();
newItem->setDescription(itemDescription);
newItem->setPerUnitOunces(perUnitOunces);
newItem->setPrice(itemPrice);
newItem->setQuantity(itemQuantity);</source>
<p>That's pretty much all there is to it. The JavaBeans-style access provided by
                    compiling your schema greatly simplifies your access to XML instances based on
                    the schema. We believe, that implementing JavaBeans-style access to XML in C++
		    can really speed up development, enable compile-time type-checking, etc.</p>

<p>Here's a full version of the tutorial code, with the
                    <code>addLineItem</code> function accessible via a <code>main</code> function.</p>
<source><![CDATA[#include <fstream>
#include <easypo.h>

using namespace std;
using namespace org::openuri::easypo;

string addLineItem(istream& purchaseOrder, string itemDescription,
                                           string perUnitOuncesString, 
	                                   string itemPriceString,
	                                   string itemQuantityString)
{
    // Bind the incoming XML to an xmlbeansxx type.
    PurchaseOrderDocument poDoc;
    poDoc = PurchaseOrderDocument::Factory::parse(purchaseOrder);

    // Convert incoming data to types that can be used in accessors.
    BigInteger perUnitOunces(perUnitOuncesString);
    BigInteger itemPrice(itemPriceString);
    BigInteger itemQuantity(itemQuantityString);

    // Add the new <line-item> element.
    PurchaseOrderDocument_PurchaseOrder po(poDoc->getPurchaseOrder());
    if (!po) {
        return string("NULL PURCHASE-ORDER");
    }

    LineItem newItem = po->addNewLineItem();

    newItem->setDescription(itemDescription);
    newItem->setPerUnitOunces(perUnitOunces);
    newItem->setPrice(itemPrice);
    newItem->setQuantity(itemQuantity);
    string res(poDoc->toString());
}

int main(int argc, char* argv[]) {
    if (argc < 6) {
        cout << "Syntax: ./" << argv[0] << " filename a b c d" << endl;
        return -1;
    }

    ifstream poXmlFile(argv[1]);

    string updatedPoXml = addLineItem(poXmlFile, argv[2], argv[3], argv[4], argv[5]);

    cout << updatedPoXml << endl;

    return 0;
}]]></source>
<p>Now, compile the code with a command such as the following (the line is
                    broken for readability):</p>

<source>g++ -o sample src/cpp/sample.cpp
	-I/home/pb/TouK/touk/trunk/xxx/include
	-L/home/pb/TouK/touk/trunk/xxx/lib
	-lxerces-c -lgmp -lgmpxx -lxmltypes -pthread</source>

<p>After you compile, you can try out the sample with the following command:</p>
<source>./sample "a new item" 5.0 20.00 6</source>

<p>The output should look like the instance output above, but with the following
                    added as the last <code>&lt;line-item&gt;</code> element, immediately
                    before the <code>&lt;shipper&gt;</code> element. </p>
<source>&lt;line-item&gt;
    &lt;description&gt;Backyard Astronomer's Guide, The&lt;/description&gt;
    &lt;per-unit-ounces&gt;5.0&lt;/per-unit-ounces&gt;
    &lt;price&gt;49.95&lt;/price&gt;
    &lt;quantity&gt;2&lt;/quantity&gt;
&lt;/line-item&gt;</source>

<p>Obviously, you need a schema to use this aspect of <strong>xmlbeansxx</strong>. But you may find
                    yourself creating a schema where you only have instances so that you can compile
                    it to generate those Java types &mdash; just to make your life a little easier.</p>
</section>
</section>
</section>
      

<section>        
<title>Getting Started with the XML Cursor</title>
<p>This part will be added after XML Cursor functionality is implemented.</p>
</section>
      
<section>
<title>Where to Go from Here</title>
<ul>
                
<li>Be sure to check out the <a href="index.html"><strong>xmlbeansxx</strong> documentation</a>.</li>
                
<!-- <li>The <a href="http://xmlbeans.apache.org/resources/index.html"><strong>xmlbeansxx</strong>
                    Resources</a> page provides links to lots of articles.</li> -->

            
</ul>
</section>
</body> 

</document>
